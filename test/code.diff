--- 1.py	2025-07-15 15:39:00.622281582 +0200
+++ 2.py	2025-07-15 15:54:15.269346680 +0200
@@ -1,35 +1,33 @@
-# Keywords & syntax demo (A)
+# Keywords & syntax demo (B)
 
 import math
 from math import pi as circle_pi
 
 class Example:
-    def __init__(self, value: int = 0) -> None:
+    def __init__(self, value: int = 1) -> None:  # Changed default from 0 to 1
         self.value = value
 
     def compute(self) -> float:
-        if self.value > 0:
+        if self.value >= 0:  # Changed > to >=
             for i in range(1, 10):
-                while i < 5:
+                while i < 6:  # Changed 5 to 6
                     try:
-                        assert i != 3, "Unlucky number"
+                        assert i != 4, "Unlucky number"  # Changed 3 to 4
                         yield i
                         break
                     except AssertionError as e:
-                        print(f"Caught: {e}")
+                        print(f"Error: {e}")  # Changed message
                         continue
                     finally:
                         pass
-        elif self.value == 0:
+        elif self.value == -1:  # Changed 0 to -1
             return None
         else:
-            raise ValueError("Negative!")
+            raise ValueError("Too negative!")  # Changed error message and a liot of other things and many more sthings and erhlghs eskjrhg ewg ewkh lk4w5ypow45klthq3 k45hkjlw hkj54wnt 3q5t 5iuyg4wiu hq5k4nt kjl35wht jgwhj we hjl ghwergewrjgh erwjgh ewrkjgh erwkljgh ewrrg ewrgj herwg erwrgh ewjrgh ewrjgh werjlgjj hwerkljgh wergj hewrkjgh wergh wergh  ewrkjlgherw gerwkjlhgkl wergkjlw ewrjgh wergh werkjgh kj jkerhgj wegr
 
 def main():
-    e = Example(2)
-    result = [x for x in e.compute() if x % 2 == 0]
-    print("Results:", result)
-
+    if a:
+        
     match e.value:
         case 0:
             print("Zero")
@@ -41,16 +39,16 @@
     def inner(*args, **kwargs):
         global x
         nonlocal result
-        x = lambda y: y ** 2
-        print({k: v for k, v in kwargs.items()})
+        x = lambda y: y + 1  # Changed expression
+        print({k: v.upper() for k, v in kwargs.items()})  # Added .upper()
         return x(args[0]) if args else None
 
-    print(inner(4, key='val'))
+    print(inner(3, key='val'))  # Changed arg
 
 if __name__ == "__main__":
     main()
 
 
-        old_part = sanitize(old_line[i1:i2])
-        new_part = sanitize(new_line[j1:j2])
+        old_part = " ".join(sanitize(tok) for tok in old_tokens[i1:i2])
+        new_part = " ".join(sanitize(tok) for tok in new_tokens[j1:j2])
         
\ No newline at end of file
